from textblob import TextBlob
import requests
import os
from dotenv import load_dotenv
import json  # This is necessary to parse API responses
import sys  # For sys.exit()
import nltk  # For NLTK data download

# Load environment variables from .env into environment
# Make sure your .env file is in the same directory as this Python script
# and contains a line like: GEMINI_API_KEY="your_actual_gemini_api_key_here"
load_dotenv()

# --- Configuration ---
gemini_key = os.getenv("GEMINI_API_KEY")  # Get API key from .env file

# Ensure API key is loaded
if not gemini_key:
    print("\n\nтЭЧтЭЧтЭЧ ржЧрзБрж░рзБрждрзНржмржкрж░рзНржг ржирзЛржЯрж┐рж╢ тЭЧтЭЧтЭЧ")
    print("ржЖржкржирж╛рж░ Gemini API Key .env ржлрж╛ржЗрж▓ ржерзЗржХрзЗ рж▓рзЛржб ржХрж░рж╛ ржпрж╛ржпрж╝ржирж┐ред")
    print(
        "ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рзБржи ржпрзЗ ржЖржкржирж╛рж░ .env ржлрж╛ржЗрж▓ржЯрж┐ ржПржЗ Python рж╕рзНржХрзНрж░рж┐ржкрзНржЯрзЗрж░ ржПржХржЗ ржбрж┐рж░рзЗржХрзНржЯрж░рж┐рждрзЗ ржЖржЫрзЗ ржПржмржВ рждрж╛рждрзЗ 'GEMINI_API_KEY=\"ржЖржкржирж╛рж░_ржЖрж╕рж▓_API_Key_ржПржЦрж╛ржирзЗ_ржжрж┐ржи\"' ржПржЗ ржлрж░рзНржорзЗ ржЖржкржирж╛рж░ API Key ржжрзЗржУржпрж╝рж╛ ржЖржЫрзЗред")
    print("ржкрзНрж░рзЛржЧрзНрж░рж╛ржоржЯрж┐ ржмржирзНржз ржХрж░рж╛ рж╣ржЪрзНржЫрзЗред")
    sys.exit(1)

# Using gemini-2.0-flash as per your original code
GEMINI_API_URL = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={gemini_key}"

SPAM_KEYWORDS = ["buy now", "click here", "spamword1", "ржЕрж╢рзНрж▓рзАрж▓", "ржЕржмрзНржпржмрж╣рж╛рж░", "price kot", "price koto"]

# Global variable to store business context - will be populated by user input
BUSINESS_CONTEXT = ""


# ---------------- Functions ----------------

def is_spam_keyword(text):
    """
    Checks if the text contains any predefined spam keywords.
    """
    text_lower = text.lower()
    for word in SPAM_KEYWORDS:
        if word in text_lower:
            return True
    return False


def get_sentiment(text):
    """
    Analyzes the sentiment of the given text using TextBlob.
    Returns "positive", "negative", or "neutral".
    """
    try:
        polarity = TextBlob(text).sentiment.polarity
        if polarity > 0.1:
            return "positive"
        elif polarity < -0.1:
            return "negative"
        else:
            return "neutral"
    except Exception as e:
        print(f"Sentiment analysis error (TextBlob): {e}. NLTK data might be missing.")
        print("Please ensure you've run 'python -m textblob.download_corpora' if you see repeated errors.")
        return "neutral"  # Default to neutral if sentiment analysis fails


def generate_reply(comment, sentiment):
    """
    Generates a reply using the Gemini API, incorporating the global BUSINESS_CONTEXT,
    the user's comment, and its sentiment.
    """
    headers = {"Content-Type": "application/json"}

    # The prompt now includes the global BUSINESS_CONTEXT
    prompt_text = f"""
    ржЖржкржирж┐ ржПржХржЯрж┐ ржлрзЗрж╕ржмрзБржХ ржкрзЗржЬрзЗрж░ ржХрж╛рж╕рзНржЯржорж╛рж░ рж╕рж╛рж░рзНржнрж┐рж╕ ржЕрзНржпрж╛рж╕рж┐рж╕рзНржЯрзНржпрж╛ржирзНржЯред ржЖржкржирж╛рж░ ржмрзНржпржмрж╕рж╛рж░ ржмрж┐ржмрж░ржг ржирж┐ржЪрзЗ ржжрзЗржУржпрж╝рж╛ рж╣рж▓рзЛ:
    "{BUSINESS_CONTEXT}"

    ржПржХржЬржи ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА ржоржирзНрждржмрзНржп ржХрж░рзЗржЫрзЗржи: "{comment}" (ржПржЗ ржоржирзНрждржмрзНржпрзЗрж░ ржЕржирзБржнрзВрждрж┐: {sentiment})ред
    ржПржЗ ржоржирзНрждржмрзНржпрзЗрж░ ржкрзНрж░рждрж┐ржХрзНрж░рж┐ржпрж╝рж╛ рж╣рж┐рж╕рж╛ржмрзЗ, ржЖржкржирж╛рж░ ржмрзНржпржмрж╕рж╛рж░ ржкрзНрж░рзЗржХрзНрж╖рж╛ржкржЯрзЗрж░ ржЙржкрж░ ржнрж┐рждрзНрждрж┐ ржХрж░рзЗ ржПржХржЯрж┐ рж╕ржВржХрзНрж╖рж┐ржкрзНржд, ржмрж┐ржиржпрж╝рзА ржПржмржВ рж╕рж╣рж╛ржпрж╝ржХ ржЙрждрзНрждрж░ ржжрж┐ржиред
    ржпржжрж┐ ржоржирзНрждржмрзНржпрзЗ ржжрж╛ржо ржмрж╛ рж╕рзНржЯржХрзЗрж░ ржорждрзЛ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржкрзНрж░рж╢рзНржи ржерж╛ржХрзЗ, рждрж╛рж╣рж▓рзЗ ржЖржкржирж╛рж░ ржмрзНржпржмрж╕рж╛рж░ ржмрж┐ржмрж░ржг ржЕржирзБржпрж╛ржпрж╝рзА ржЙрждрзНрждрж░ ржжрж┐ржиред
    ржЙрждрзНрждрж░ржЯрж┐ ржмрж╛ржВрж▓рж╛рждрзЗ ржжрж┐ржиред
    """

    payload = {
        "contents": [{"role": "user", "parts": [{"text": prompt_text}]}]
    }

    try:
        print(f"ЁЯЪА Gemini API-рждрзЗ ржЕржирзБрж░рзЛржз ржкрж╛ржарж╛ржирзЛ рж╣ржЪрзНржЫрзЗ (gemini-2.0-flash)...")
        response = requests.post(GEMINI_API_URL, headers=headers, json=payload, timeout=45)  # Increased timeout
        response.raise_for_status()  # Raises an HTTPError for bad responses (4xx or 5xx)

        data = response.json()

        # Robust check for response structure
        if 'candidates' in data and \
                isinstance(data['candidates'], list) and \
                len(data['candidates']) > 0 and \
                'content' in data['candidates'][0] and \
                'parts' in data['candidates'][0]['content'] and \
                isinstance(data['candidates'][0]['content']['parts'], list) and \
                len(data['candidates'][0]['content']['parts']) > 0 and \
                'text' in data['candidates'][0]['content']['parts'][0]:
            return data['candidates'][0]['content']['parts'][0]['text'].strip()
        else:
            print(
                f"Gemini API Error: ржЕржкрзНрж░рждрзНржпрж╛рж╢рж┐ржд рж╕рж╛ржбрж╝рж╛ ржХрж╛ржарж╛ржорзЛ ржмрж╛ ржХрзЛржирзЛ ржмрж┐рж╖ржпрж╝ржмрж╕рзНрждрзБ ржирзЗржЗред рж╕рж╛ржбрж╝рж╛: {json.dumps(data, indent=2)}")
            # Check for specific error messages from Gemini if present in the response
            if 'error' in data and 'message' in data['error']:
                return f"тЭМ ржжрзБржГржЦрж┐ржд, ржЙрждрзНрждрж░ рждрзИрж░рж┐ ржХрж░рж╛ ржпрж╛ржпрж╝ржирж┐ред API рждрзНрж░рзБржЯрж┐: {data['error']['message']}"
            return "тЭМ ржжрзБржГржЦрж┐ржд, ржЙрждрзНрждрж░ рждрзИрж░рж┐ ржХрж░рж╛ ржпрж╛ржпрж╝ржирж┐ред API ржерзЗржХрзЗ ржЕржкрзНрж░рждрзНржпрж╛рж╢рж┐ржд рж╕рж╛ржбрж╝рж╛ред"

    except requests.exceptions.Timeout:
        print("Gemini API Error: ржЕржирзБрж░рзЛржзрзЗрж░ рж╕ржоржпрж╝ рж╢рзЗрж╖ рж╣ржпрж╝рзЗ ржЧрзЗржЫрзЗред")
        return "тЭМ ржжрзБржГржЦрж┐ржд, AI ржЙрждрзНрждрж░ ржжрж┐рждрзЗ ржЦрзБржм ржмрзЗрж╢рж┐ рж╕ржоржпрж╝ ржирж┐ржпрж╝рзЗржЫрзЗред"
    except requests.exceptions.HTTPError as e:
        print(f"Gemini API HTTP Error: {e.response.status_code} - {e.response.text}")
        if e.response.status_code == 400:
            return f"тЭМ ржнрзБрж▓ ржЕржирзБрж░рзЛржз (Bad Request)ред рж╕ржорзНржнржмржд ржЖржкржирж╛рж░ ржкрзНрж░ржорзНржкржЯрзЗ рж╕ржорж╕рзНржпрж╛ ржЖржЫрзЗ ржмрж╛ ржоржбрзЗрж▓ рж╕рзЗржЯрж┐ ржмрзБржЭрждрзЗ ржкрж╛рж░ржЫрзЗ ржирж╛: {e.response.text}"
        elif e.response.status_code == 401:
            return "тЭМ API Key ржнрзБрж▓ ржмрж╛ ржорзЗржпрж╝рж╛ржжрзЛрждрзНрждрзАрж░рзНржгред ржЖржкржирж╛рж░ ржХрзА ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рзБржиред"
        elif e.response.status_code == 429:
            return "тЭМ рж░рзЗржЯ рж▓рж┐ржорж┐ржЯ ржЕрждрж┐ржХрзНрж░ржо ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржХрж┐ржЫрзБржХрзНрж╖ржг ржкрж░ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред"
        elif e.response.status_code == 500 or e.response.status_code == 503:
            return "тЭМ Gemini рж╕рж╛рж░рзНржнрж╛рж░ рж╕ржорж╕рзНржпрж╛ред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржХрж┐ржЫрзБржХрзНрж╖ржг ржкрж░ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред"
        return f"тЭМ ржЙрждрзНрждрж░ рждрзИрж░рж┐ ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗред HTTP рждрзНрж░рзБржЯрж┐: {e.response.status_code}"
    except requests.exceptions.RequestException as e:
        print(f"Gemini API Request Error: {e}")
        return "тЭМ ржирзЗржЯржУржпрж╝рж╛рж░рзНржХ ржмрж╛ ржЕржирзБрж░рзЛржзрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗред"
    except json.JSONDecodeError:
        print(f"Gemini API JSON Decode Error: API ржерзЗржХрзЗ ржЕржХрж╛рж░рзНржпржХрж░ JSON рж╕рж╛ржбрж╝рж╛ред рж╕рж╛ржбрж╝рж╛: {response.text[:200]}...")
        return "тЭМ API ржерзЗржХрзЗ ржЕржХрж╛рж░рзНржпржХрж░ ржкрзНрж░рждрж┐ржХрзНрж░рж┐ржпрж╝рж╛ред"
    except Exception as e:
        print(f"ржПржХржЯрж┐ ржЕржкрзНрж░рждрзНржпрж╛рж╢рж┐ржд рждрзНрж░рзБржЯрж┐ ржШржЯрзЗржЫрзЗ: {e}")
        return "тЭМ ржПржХржЯрж┐ ржЕржкрзНрж░рждрзНржпрж╛рж╢рж┐ржд рждрзНрж░рзБржЯрж┐ ржШржЯрзЗржЫрзЗред"


# ---------------- Main Program Flow ----------------

def chat_loop():
    """
    Main function to run the Facebook comment auto-reply tool.
    It prompts the page owner for business information and then runs the chat loop.
    """
    global BUSINESS_CONTEXT  # Declare BUSINESS_CONTEXT as global to modify it

    print("--- ЁЯТм Facebook Comment Auto-Reply (Gemini Powered) ---")
    print("рж╕рзНржмрж╛ржЧрждржо, ржкрзЗржЬ ржУржирж╛рж░! ржЪрж▓рзБржи ржЖржкржирж╛рж░ ржмржЯ рж╕рзЗржЯржЖржк ржХрж░рж╛ ржпрж╛ржХред")

    # --- 1. Get Business Context from Page Owner ---
    print("\n--- ржмрзНржпржмрж╕рж╛ рж╕ржВржХрзНрж░рж╛ржирзНржд рждржерзНржпрзЗрж░ рж╕рзЗржЯржЖржк ---")
    print("ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржкржирж╛рж░ ржлрзЗрж╕ржмрзБржХ ржкрзЗржЬ ржПржмржВ ржмрзНржпржмрж╕рж╛рж░ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд рждржерзНржп ржжрж┐ржиред")
    print("ржПржЗ рждржерзНржп AI-ржХрзЗ ржЖржкржирж╛рж░ ржмрзНржпржмрж╕рж╛рж░ ржмрж┐рж╖ржпрж╝рзЗ рж╢рж┐ржЦрждрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░ржмрзЗ ржПржмржВ рж╕рзЗржЗ ржЕржирзБржпрж╛ржпрж╝рзА ржЙрждрзНрждрж░ ржжрзЗржмрзЗред")
    print(
        "ржЙржжрж╛рж╣рж░ржг: 'ржЖржкржирж┐ ржПржХржЯрж┐ ржЕржирж▓рж╛ржЗржи ржкрзЛрж╢рж╛ржХрзЗрж░ ржжрзЛржХрж╛ржирзЗрж░ ржХрж╛рж╕рзНржЯржорж╛рж░ рж╕рж╛рж░рзНржнрж┐рж╕ ржЕрзНржпрж╛рж╕рж┐рж╕рзНржЯрзНржпрж╛ржирзНржЯред ржЖржкржирж╛рж░ ржжрзЛржХрж╛ржирзЗрж░ ржирж╛ржо 'ржлрзНржпрж╛рж╢ржи рж╣рж╛ржм ржмрж╛ржВрж▓рж╛ржжрзЗрж╢'ред ржЖржорж░рж╛ ржкрзБрж░рзБрж╖ ржУ ржорж╣рж┐рж▓рж╛ржжрзЗрж░ ржЬржирзНржп ржЯрзНрж░рзЗржирзНржбрж┐ ржкрзЛрж╢рж╛ржХ, ржпрзЗржоржи: ржЯрж┐-рж╢рж╛рж░рзНржЯ, рж╢рж╛рж░рзНржЯ, ржЬрж┐ржирзНрж╕, ржХрзБрж░рзНрждрж┐, рж╢рж╛ржбрж╝рж┐, ржПржмржВ ржбрзНрж░рзЗрж╕ ржмрж┐ржХрзНрж░рж┐ ржХрж░рж┐ред ржЖржорж╛ржжрзЗрж░ ржкрзНрж░ржзрж╛ржи ржЙржжрзНржжрзЗрж╢рзНржп рж╣рж▓рзЛ ржХрж╛рж╕рзНржЯржорж╛рж░ржжрзЗрж░ ржжрзНрж░рзБржд ржПржмржВ ржмржирзНржзрзБрждрзНржмржкрзВрж░рзНржг рж╕рзЗржмрж╛ ржкрзНрж░ржжрж╛ржи ржХрж░рж╛ред ржпржжрж┐ ржХрж╛рж╕рзНржЯржорж╛рж░ ржкржгрзНржпрзЗрж░ ржжрж╛ржо, рж╕рзНржЯржХ, ржбрзЗрж▓рж┐ржнрж╛рж░рж┐ рж╕ржоржпрж╝, ржмрж╛ рж░рж┐ржЯрж╛рж░рзНржи ржкрж▓рж┐рж╕рж┐ ржирж┐ржпрж╝рзЗ ржкрзНрж░рж╢рзНржи ржХрж░рзЗ, рждрж╛рж╣рж▓рзЗ ржмрж▓рзБржи ржпрзЗ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд рждржерзНржпрзЗрж░ ржЬржирзНржп ржЖржорж╛ржжрзЗрж░ ржУржпрж╝рзЗржмрж╕рж╛ржЗржЯ (www.fashionhubbd.com) ржнрж┐ржЬрж┐ржЯ ржХрж░рждрзЗ ржмрж╛ рж╕рж░рж╛рж╕рж░рж┐ ржорзЗрж╕рзЗржЬ ржкрж╛ржарж╛рждрзЗред'")
    print("ржмрж░рзНржгржирж╛ ржжрзЗржУржпрж╝рж╛ рж╢рзЗрж╖ рж╣рж▓рзЗ **ржЦрж╛рж▓рж┐ рж▓рж╛ржЗржи рж░рзЗржЦрзЗ ржПржирзНржЯрж╛рж░ ржЪрж╛ржкрзБржи**ред")

    context_lines = []
    while True:
        line = input("ржЖржкржирж╛рж░ ржмрзНржпржмрж╕рж╛рж░ ржмрж░рзНржгржирж╛ (ржПржХ рж▓рж╛ржЗржи): ")
        if not line.strip():  # Check for empty line (after removing leading/trailing whitespace)
            break
        context_lines.append(line)

    if not context_lines:
        print("ржХрзЛржирзЛ ржмрзНржпржмрж╕рж╛рж░ ржмрж░рзНржгржирж╛ ржжрзЗржУржпрж╝рж╛ рж╣ржпрж╝ржирж┐ред AI ржПржХржЯрж┐ ржЬрзЗржирзЗрж░рж┐ржХ ржЕрзНржпрж╛рж╕рж┐рж╕рзНржЯрзНржпрж╛ржирзНржЯ рж╣рж┐рж╕рзЗржмрзЗ ржХрж╛ржЬ ржХрж░ржмрзЗред")
        BUSINESS_CONTEXT = "ржЖржкржирж┐ ржПржХржЯрж┐ рж╕рж╣рж╛ржпрж╝ржХ рж╕рж╣ржХрж╛рж░рзАред"
    else:
        BUSINESS_CONTEXT = "\n".join(context_lines).strip()

    print("\n--- рж╕рзЗржЯржЖржк рж╕ржорзНржкржирзНржи рж╣ржпрж╝рзЗржЫрзЗ! ржХржорзЗржирзНржЯ рж╕рж┐ржорзБрж▓рзЗрж╢ржи рж╢рзБрж░рзБ рж╣ржЪрзНржЫрзЗ ---")
    print("ржПржЦржи ржЖржкржирж┐ ржлрзЗрж╕ржмрзБржХ ржХржорзЗржирзНржЯрзЗрж░ ржЕржирзБржХрж░ржг ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржиред")
    print("ржкрзНрж░рзЛржЧрзНрж░рж╛ржо ржмржирзНржз ржХрж░рждрзЗ ржпрзЗржХрзЛржирзЛ рж╕ржоржпрж╝ 'exit' ржЯрж╛ржЗржк ржХрж░рзБржиред")
    print("-" * 60 + "\n")

    # --- 2. Start Comment Simulation Loop ---
    while True:
        comment = input("тЬНя╕П ржПржХржЯрж┐ ржлрзЗрж╕ржмрзБржХ ржХржорзЗржирзНржЯ рж▓рж┐ржЦрзБржи (ржмрж╛ 'exit' ржЯрж╛ржЗржк ржХрж░рзБржи):\n> ")
        if comment.lower() == "exit":
            print("\nЁЯТм ржкрзНрж░рзЛржЧрзНрж░рж╛ржо ржмржирзНржз ржХрж░рж╛ рж╣ржЪрзНржЫрзЗред ржмрж┐ржжрж╛ржпрж╝!")
            break

        if is_spam_keyword(comment):
            print("ЁЯЪл ржПржЗ ржХржорзЗржирзНржЯржЯрж┐ рж╕рзНржкрзНржпрж╛ржо рж╣рж┐рж╕рзЗржмрзЗ ржЪрж┐рж╣рзНржирж┐ржд рж╣ржпрж╝рзЗржЫрзЗред рж░рж┐ржкрзНрж▓рж╛ржЗ ржжрзЗржУржпрж╝рж╛ рж╣ржЪрзНржЫрзЗ ржирж╛ред\n")
            continue

        sentiment = get_sentiment(comment)
        print(f"ЁЯФО ржХржорзЗржирзНржЯрзЗрж░ ржЕржирзБржнрзВрждрж┐: {sentiment.capitalize()}")

        # Pass comment and sentiment to generate_reply
        reply = generate_reply(comment, sentiment)
        print(f"\nЁЯдЦ рж╕рзНржмржпрж╝ржВржХрзНрж░рж┐ржпрж╝ рж░рж┐ржкрзНрж▓рж╛ржЗ:\n{reply}\n" + "-" * 60)


# ---------------- Run ----------------

if __name__ == "__main__":
    # Download NLTK data if not already present for TextBlob
    try:
        TextBlob("test").sentiment
    except Exception:
        print("\nTextBlob ржПрж░ ржЬржирзНржп NLTK ржбрзЗржЯрж╛ ржкрзНрж░ржпрж╝рзЛржЬржиред 'punkt' ржПржмржВ 'brown' ржХрж░рзНржкрзЛрж░рж╛ ржбрж╛ржЙржирж▓рзЛржб ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...")
        print("ржПржЯрж┐ рж╢рзБржзрзБ ржПржХржмрж╛рж░ ржЪрж▓ржмрзЗред")
        try:
            nltk.download('punkt', quiet=True)
            nltk.download('brown', quiet=True)
            print("NLTK ржбрзЗржЯрж╛ рж╕ржлрж▓ржнрж╛ржмрзЗ ржбрж╛ржЙржирж▓рзЛржб рж╣ржпрж╝рзЗржЫрзЗ!\n")
        except Exception as dl_e:
            print(f"NLTK ржбрзЗржЯрж╛ ржбрж╛ржЙржирж▓рзЛржб ржХрж░рждрзЗ рждрзНрж░рзБржЯрж┐: {dl_e}")
            print(
                "ржпржжрж┐ рж╕ржорж╕рзНржпрж╛ ржерж╛ржХрзЗ, рждржмрзЗ ржЯрж╛рж░рзНржорж┐ржирж╛рж▓рзЗ 'python -m textblob.download_corpora' ржорзНржпрж╛ржирзБржпрж╝рж╛рж▓рж┐ рж░рж╛ржи ржХрж░рж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред\n")

    chat_loop()  # Call the main chat loop function